[{"/Users/vibertthio/Desktop/kitty-crossing/src/App.js":"1","/Users/vibertthio/Desktop/kitty-crossing/src/index.js":"2","/Users/vibertthio/Desktop/kitty-crossing/src/Card.js":"3","/Users/vibertthio/Desktop/kitty-crossing/src/Furniture.js":"4","/Users/vibertthio/Desktop/kitty-crossing/src/Cat.js":"5","/Users/vibertthio/Desktop/kitty-crossing/src/Fish.js":"6","/Users/vibertthio/Desktop/kitty-crossing/src/Game.js":"7","/Users/vibertthio/Desktop/kitty-crossing/src/AudioCon.js":"8","/Users/vibertthio/Desktop/kitty-crossing/src/firebase.js":"9","/Users/vibertthio/Desktop/kitty-crossing/src/MeowBot.js":"10","/Users/vibertthio/Desktop/kitty-crossing/src/Shop.js":"11","/Users/vibertthio/Desktop/kitty-crossing/src/RouterOpt.js":"12"},{"size":1860,"mtime":1614293068111,"results":"13","hashOfConfig":"14"},{"size":219,"mtime":1607454119381,"results":"15","hashOfConfig":"14"},{"size":1293,"mtime":1614293053916,"results":"16","hashOfConfig":"14"},{"size":2017,"mtime":1614293069430,"results":"17","hashOfConfig":"14"},{"size":557,"mtime":1614122251853,"results":"18","hashOfConfig":"14"},{"size":479,"mtime":1614293067142,"results":"19","hashOfConfig":"14"},{"size":5888,"mtime":1614293063983,"results":"20","hashOfConfig":"14"},{"size":2696,"mtime":1614293132724,"results":"21","hashOfConfig":"14"},{"size":586,"mtime":1608229928908,"results":"22","hashOfConfig":"14"},{"size":3058,"mtime":1614131543591,"results":"23","hashOfConfig":"14"},{"size":10878,"mtime":1614293062187,"results":"24","hashOfConfig":"14"},{"size":1491,"mtime":1614291035062,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wwiif8",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/vibertthio/Desktop/kitty-crossing/src/App.js",[],"/Users/vibertthio/Desktop/kitty-crossing/src/index.js",[],["52","53"],"/Users/vibertthio/Desktop/kitty-crossing/src/Card.js",["54"],"/Users/vibertthio/Desktop/kitty-crossing/src/Furniture.js",[],"/Users/vibertthio/Desktop/kitty-crossing/src/Cat.js",[],"/Users/vibertthio/Desktop/kitty-crossing/src/Fish.js",[],"/Users/vibertthio/Desktop/kitty-crossing/src/Game.js",["55","56"],"/Users/vibertthio/Desktop/kitty-crossing/src/AudioCon.js",[],"/Users/vibertthio/Desktop/kitty-crossing/src/firebase.js",[],"/Users/vibertthio/Desktop/kitty-crossing/src/MeowBot.js",["57"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { db } from \"./firebase\";\nimport firebase from \"firebase\";\nimport \"./MeowBot.css\";\n\nconst MeowBot = () => {\n  const messageEl = useRef(null);\n  const [messages, setmessages] = useState([]); //store all the messages\n  const [input, setinput] = useState(\"\"); //show word in the input space\n  const [response, setresponse] = useState(\"\");\n  let responding;\n  useEffect(() => {\n    if (messageEl) {\n      messageEl.current.addEventListener(\"DOMNodeInserted\", (event) => {\n        const { currentTarget: target } = event;\n        target.scroll({ top: target.scrollHeight, behavior: \"smooth\" });\n      });\n    }\n  }, []);\n  useEffect(() => {\n    let unsubscribe;\n    unsubscribe = db\n      .collection(\"messages\")\n      .orderBy(\"timestamp\", \"asc\")\n      .onSnapshot((snapshot) => {\n        setmessages(snapshot.docs.map((doc) => ({ id: doc.id, message: doc.data() })));\n      });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n  //should wait for searchResponseSen state change and add it to db\n  useEffect(() => {\n    if (response) {\n      responding = setTimeout(() => {\n        db.collection(\"messages\").add({\n          text: response,\n          user: \"cat\",\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        });\n        setresponse(\"\");\n      }, Math.random() * 5000);\n      return () => {\n        clearTimeout(responding);\n      };\n    }\n  }, [response]);\n  //searchResponseSen and add user text to db\n  const handlesend = (e) => {\n    e.preventDefault();\n    db.collection(\"messages\").add({\n      text: input,\n      user: \"user\",\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    searchResponseSen(input);\n    setinput(\"\");\n  };\n  let searchResponseSen = (input) => {\n    fetch(\"https://kitty-chatting-api.herokuapp.com/message\")\n      .then((response) => response.json())\n      .then((data) => {\n        let responseSen;\n        data.forEach((jsoncase) => {\n          for (let i = 0; i < jsoncase.requestContain.length; i++) {\n            if (input.includes(jsoncase.requestContain[i])) {\n              responseSen = jsoncase.responseSen;\n            }\n          }\n          if (!responseSen) {\n            responseSen = \"meow\";\n          }\n        });\n        setresponse(responseSen);\n      });\n  };\n\n  return (\n    <div className=\"meowbot\">\n      <div className=\"messages\" ref={messageEl}>\n        {messages.map(({ id, message }) =>\n          message.user === \"cat\" ? (\n            <p key={id} className=\"catmessages\">\n              {`${message.text} `}\n            </p>\n          ) : (\n            <p key={id} className=\"usermessages\">\n              {`${message.text} `}\n            </p>\n          )\n        )}\n      </div>\n      <form className=\"inputtext\">\n        <input value={input} className=\"text_area\" type=\"text\" onChange={(e) => setinput(e.target.value)} />\n        <button className=\"send_area\" onClick={handlesend}>\n          send\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default MeowBot;\n","/Users/vibertthio/Desktop/kitty-crossing/src/Shop.js",[],"/Users/vibertthio/Desktop/kitty-crossing/src/RouterOpt.js",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":15,"column":6,"nodeType":"64","endLine":15,"endColumn":21,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"66","line":66,"column":17,"nodeType":"67","endLine":68,"endColumn":13},{"ruleId":"62","severity":1,"message":"68","line":125,"column":18,"nodeType":"67","endLine":138,"endColumn":12},{"ruleId":"62","severity":1,"message":"69","line":35,"column":20,"nodeType":"67","endLine":42,"endColumn":31},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.","ArrayExpression",["72"],"Assignments to the 'catdrop' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Assignments to the 'fishmove' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'responding' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [furniturelist, name]",{"range":"75","text":"76"},[469,484],"[furniturelist, name]"]