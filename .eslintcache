[{"/Users/vibertthio/Desktop/kitty-crossing/src/App.js":"1","/Users/vibertthio/Desktop/kitty-crossing/src/index.js":"2","/Users/vibertthio/Desktop/kitty-crossing/src/Card.js":"3","/Users/vibertthio/Desktop/kitty-crossing/src/Furniture.js":"4","/Users/vibertthio/Desktop/kitty-crossing/src/Cat.js":"5","/Users/vibertthio/Desktop/kitty-crossing/src/Fish.js":"6","/Users/vibertthio/Desktop/kitty-crossing/src/Game.js":"7","/Users/vibertthio/Desktop/kitty-crossing/src/AudioCon.js":"8","/Users/vibertthio/Desktop/kitty-crossing/src/firebase.js":"9","/Users/vibertthio/Desktop/kitty-crossing/src/MeowBot.js":"10","/Users/vibertthio/Desktop/kitty-crossing/src/Shop.js":"11","/Users/vibertthio/Desktop/kitty-crossing/src/RouterOpt.js":"12"},{"size":1860,"mtime":1614293068111,"results":"13","hashOfConfig":"14"},{"size":219,"mtime":1607454119381,"results":"15","hashOfConfig":"14"},{"size":1293,"mtime":1614293053916,"results":"16","hashOfConfig":"14"},{"size":2017,"mtime":1614293069430,"results":"17","hashOfConfig":"14"},{"size":557,"mtime":1614122251853,"results":"18","hashOfConfig":"14"},{"size":479,"mtime":1614293067142,"results":"19","hashOfConfig":"14"},{"size":5888,"mtime":1614293063983,"results":"20","hashOfConfig":"14"},{"size":2696,"mtime":1614293132724,"results":"21","hashOfConfig":"14"},{"size":586,"mtime":1608229928908,"results":"22","hashOfConfig":"14"},{"size":3058,"mtime":1614131543591,"results":"23","hashOfConfig":"14"},{"size":10878,"mtime":1614293062187,"results":"24","hashOfConfig":"14"},{"size":1491,"mtime":1614291035062,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wwiif8",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"/Users/vibertthio/Desktop/kitty-crossing/src/App.js",[],"/Users/vibertthio/Desktop/kitty-crossing/src/index.js",[],["54","55"],"/Users/vibertthio/Desktop/kitty-crossing/src/Card.js",["56"],"/Users/vibertthio/Desktop/kitty-crossing/src/Furniture.js",[],"/Users/vibertthio/Desktop/kitty-crossing/src/Cat.js",[],"/Users/vibertthio/Desktop/kitty-crossing/src/Fish.js",[],"/Users/vibertthio/Desktop/kitty-crossing/src/Game.js",["57","58"],"import React, { useState, useEffect } from \"react\";\nimport Cat from \"./Cat\";\n// import Score from \"./Score\";\n\nimport firebase from \"firebase\";\nimport Fish from \"./Fish\";\nimport \"./Game.css\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nconst Game = () => {\n  let fishWidth = 100;\n  let fishHeight = 100;\n  let catWidth = 100;\n  let catHeight = 100;\n  const [open, setOpen] = React.useState(false);\n  const [addScore, setaddScore] = useState(false);\n  const [catBottom, setcatBottom] = useState(300);\n  const [catchPhrase, setcatchPhrase] = useState(\"\");\n  const [fishes, setfishes] = useState([\n    {\n      id: Math.floor(Math.random() * 80) + 1,\n      fishBottom: 200,\n      fishLeft: window.innerWidth,\n    },\n    {\n      id: Math.floor(Math.random() * 80) + 1,\n      fishBottom: 400,\n      fishLeft: window.innerWidth * 1.2,\n    },\n    {\n      id: Math.floor(Math.random() * 80) + 1,\n      fishBottom: 700,\n      fishLeft: window.innerWidth * 1.2,\n    },\n  ]);\n  let [score, setscore] = useState(0);\n  let [isEnd, setisEnd] = useState(false);\n  let [istouch, setistouch] = useState(false);\n  let catLeft = window.innerWidth / 2;\n  let catdrop;\n  let fishmove;\n\n  const handleClose = () => {\n    setscore(0);\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    let handleKeyPress = (e) => {\n      if (!isEnd && e.keyCode === 32 && catBottom < window.innerHeight - 80) {\n        setcatBottom((catBottom) => catBottom + 40);\n      }\n    };\n    document.addEventListener(\"keydown\", handleKeyPress);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [catBottom, isEnd]);\n\n  useEffect(() => {\n    if (!isEnd && catBottom > 0) {\n      catdrop = setTimeout(() => {\n        setcatBottom((catBottom) => catBottom - 3);\n      }, 30);\n      let updatedfishlist = fishes.map((fish) => {\n        if (\n          //50 & /2is hard index\n          catLeft + 50 + catWidth / 2 >= fish.fishLeft &&\n          catLeft + 50 < fish.fishLeft + fishWidth &&\n          catBottom + 50 + catHeight / 2 > fish.fishBottom &&\n          catBottom + 50 < fish.fishBottom + fishHeight\n        ) {\n          console.log(\"touch\");\n          showAddScore();\n          fetch(`http://acnhapi.com/v1/fish/${fish.id}`)\n            .then((response) => response.json())\n            .then((data) => {\n              setaddScore(Math.floor(data.price));\n              setcatchPhrase(data[\"catch-phrase\"]);\n            });\n          setscore((score) => score + addScore);\n          return {\n            id: Math.floor(Math.random() * 80) + 1,\n            fishBottom: (window.innerHeight - fishHeight * 2) * Math.random(),\n            fishLeft: window.innerWidth + 100,\n          };\n        }\n        return fish;\n      });\n      setfishes(updatedfishlist);\n    } else {\n      clearTimeout(catdrop);\n      setisEnd(true);\n      setOpen(true);\n      const ref = firebase.database().ref(\"wallet\");\n      const getData = (ref) => {\n        return new Promise((resolve, reject) => {\n          const onError = (error) => reject(error);\n          const onData = (snap) => resolve(snap.val());\n          ref.on(\"value\", onData, onError);\n        });\n      };\n      getData(ref)\n        .then((value) => {\n          firebase\n            .database()\n            .ref(\"wallet\")\n            .set(value + score);\n        })\n        .catch((error) => {\n          console.log(\"endgameerror\");\n        });\n    }\n    return () => {\n      clearTimeout(catdrop);\n    };\n  }, [catBottom, istouch]);\n\n  useEffect(() => {\n    if (!isEnd) {\n      fishmove = setTimeout(() => {\n        let updatedfishlist = fishes.map((fish) => {\n          if (!isEnd && fish.fishLeft + fishWidth > 0) {\n            fish.fishLeft -= 1;\n            return fish;\n          } else {\n            fish.id = Math.floor(Math.random() * 80) + 1;\n            fish.fishBottom = (window.innerHeight - fishHeight * 2) * Math.random();\n            fish.fishLeft = window.innerWidth;\n            return fish;\n          }\n        });\n        setfishes(updatedfishlist);\n      }, 3);\n    }\n    return () => {\n      clearTimeout(fishmove);\n    };\n  }, [fishes]);\n  let showAddScore = () => {\n    setTimeout(() => {\n      setistouch(true);\n    }, 280);\n    setTimeout(() => {\n      setistouch(false);\n    }, 3000);\n    //  setscore(false)\n  };\n\n  return (\n    <div className=\"game\">\n      {fishes.map((f, i) => {\n        return (\n          <Fish\n            key={i}\n            fishBottom={f.fishBottom}\n            fishLeft={f.fishLeft}\n            fishWidth={fishWidth}\n            fishHeight={fishHeight}\n            id={f.id}\n          />\n        );\n      })}\n      <Cat catLeft={catLeft} catBottom={catBottom} catWidth={catWidth} catHeight={catHeight} />\n      {istouch && (\n        <div>\n          <div\n            className=\"Score\"\n            style={{\n              position: \"absolute\",\n              left: `${catLeft + 150}px`,\n              bottom: `${catBottom + 150}px`,\n            }}\n          >\n            +${addScore}\n          </div>\n          <p className=\"catchPhrase\">{catchPhrase}</p>\n        </div>\n      )}\n      <Dialog\n        open={open}\n        aria-labelledby=\"alert-dialog-title\"\n        // aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {score > 200 ? \" We have a plenteous harvest this trip! \" : \"Next time would be better\"}\n        </DialogTitle>\n        <h1>${score + addScore}</h1>\n        <DialogActions>\n          <Link to=\"/\">\n            <Button onClick={handleClose} color=\"primary\" autoFocus>\n              Go home\n            </Button>\n          </Link>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default Game;\n","/Users/vibertthio/Desktop/kitty-crossing/src/AudioCon.js",[],"/Users/vibertthio/Desktop/kitty-crossing/src/firebase.js",[],"/Users/vibertthio/Desktop/kitty-crossing/src/MeowBot.js",["59"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { db } from \"./firebase\";\nimport firebase from \"firebase\";\nimport \"./MeowBot.css\";\n\nconst MeowBot = () => {\n  const messageEl = useRef(null);\n  const [messages, setmessages] = useState([]); //store all the messages\n  const [input, setinput] = useState(\"\"); //show word in the input space\n  const [response, setresponse] = useState(\"\");\n  let responding;\n  useEffect(() => {\n    if (messageEl) {\n      messageEl.current.addEventListener(\"DOMNodeInserted\", (event) => {\n        const { currentTarget: target } = event;\n        target.scroll({ top: target.scrollHeight, behavior: \"smooth\" });\n      });\n    }\n  }, []);\n  useEffect(() => {\n    let unsubscribe;\n    unsubscribe = db\n      .collection(\"messages\")\n      .orderBy(\"timestamp\", \"asc\")\n      .onSnapshot((snapshot) => {\n        setmessages(snapshot.docs.map((doc) => ({ id: doc.id, message: doc.data() })));\n      });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n  //should wait for searchResponseSen state change and add it to db\n  useEffect(() => {\n    if (response) {\n      responding = setTimeout(() => {\n        db.collection(\"messages\").add({\n          text: response,\n          user: \"cat\",\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        });\n        setresponse(\"\");\n      }, Math.random() * 5000);\n      return () => {\n        clearTimeout(responding);\n      };\n    }\n  }, [response]);\n  //searchResponseSen and add user text to db\n  const handlesend = (e) => {\n    e.preventDefault();\n    db.collection(\"messages\").add({\n      text: input,\n      user: \"user\",\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    searchResponseSen(input);\n    setinput(\"\");\n  };\n  let searchResponseSen = (input) => {\n    fetch(\"https://kitty-chatting-api.herokuapp.com/message\")\n      .then((response) => response.json())\n      .then((data) => {\n        let responseSen;\n        data.forEach((jsoncase) => {\n          for (let i = 0; i < jsoncase.requestContain.length; i++) {\n            if (input.includes(jsoncase.requestContain[i])) {\n              responseSen = jsoncase.responseSen;\n            }\n          }\n          if (!responseSen) {\n            responseSen = \"meow\";\n          }\n        });\n        setresponse(responseSen);\n      });\n  };\n\n  return (\n    <div className=\"meowbot\">\n      <div className=\"messages\" ref={messageEl}>\n        {messages.map(({ id, message }) =>\n          message.user === \"cat\" ? (\n            <p key={id} className=\"catmessages\">\n              {`${message.text} `}\n            </p>\n          ) : (\n            <p key={id} className=\"usermessages\">\n              {`${message.text} `}\n            </p>\n          )\n        )}\n      </div>\n      <form className=\"inputtext\">\n        <input value={input} className=\"text_area\" type=\"text\" onChange={(e) => setinput(e.target.value)} />\n        <button className=\"send_area\" onClick={handlesend}>\n          send\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default MeowBot;\n","/Users/vibertthio/Desktop/kitty-crossing/src/Shop.js",[],"/Users/vibertthio/Desktop/kitty-crossing/src/RouterOpt.js",[],["60","61"],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":15,"column":6,"nodeType":"68","endLine":15,"endColumn":21,"suggestions":"69"},{"ruleId":"66","severity":1,"message":"70","line":66,"column":17,"nodeType":"71","endLine":68,"endColumn":13},{"ruleId":"66","severity":1,"message":"72","line":125,"column":18,"nodeType":"71","endLine":138,"endColumn":12},{"ruleId":"66","severity":1,"message":"73","line":35,"column":20,"nodeType":"71","endLine":42,"endColumn":31},{"ruleId":"62","replacedBy":"74"},{"ruleId":"64","replacedBy":"75"},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.","ArrayExpression",["78"],"Assignments to the 'catdrop' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Assignments to the 'fishmove' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'responding' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.",["76"],["77"],"no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},"Update the dependencies array to be: [furniturelist, name]",{"range":"81","text":"82"},[469,484],"[furniturelist, name]"]